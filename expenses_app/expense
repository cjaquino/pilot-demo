#!/usr/bin/env node

const { Client } = require('pg');

function logAndExit(error) {
  console.log(error);
  process.exit(1);
}

class ExpenseData {
  constructor() {
    this.client = new Client({ database: 'expenses' });
  }

  displayExpenses(rows) {
    rows.forEach(row => {
      let data = [
        String(row.id).padStart(3),
        row.created_on.toDateString().padStart(10),
        row.amount.padStart(12),
        row.memo
      ];

      console.log(data.join(' | '));
    });
  }

  async listExpenses() {
    await this.client.connect().catch(error => logAndExit(error));

    let res = await this.client
      .query("SELECT * FROM expenses ORDER BY created_on")
      .catch(error => logAndExit(error));

    this.displayExpenses(res.rows);

    await this.client.end().catch(error => logAndExit(error));
  }

  async addExpense(amount, memo) {
    await this.client.connect().catch(error => logAndExit(error));
    let date = (new Date()).toLocaleDateString();

    let queryText = 'INSERT INTO expenses (amount, memo, created_on) VALUES ($1, $2, $3)';
    let queryValues = [amount, memo, date];
    await this.client.query(queryText, queryValues)
      .catch(error => logAndExit(error));

    await this.client.end().catch(error => logAndExit(error));
  }

  async searchExpenses(searchTerm) {
    await this.client.connect().catch(error => logAndExit(error));

    let queryText = "SELECT * FROM expenses WHERE memo ILIKE $1";
    let res = await this.client.query(queryText, [`%${searchTerm}%`]).catch(error => logAndExit(error));

    this.displayExpenses(res.rows);

    await this.client.end().catch(error => logAndExit(error));
  }
}

class CLI {
  constructor() {
    this.application = new ExpenseData();
  }

  static HELP() {
    return `An expense recording system

Commands:

add AMOUNT MEMO [DATE] - record a new expense
clear - delete all expenses
list - list all expenses
delete NUMBER - remove expense with id NUMBER
search QUERY - list expenses with a matching memo field`;
  }

  displayHelp() {
    console.log(CLI.HELP());
  }

  run(args) {
    let command = args[2];
    if (command === 'list') {
      this.application.listExpenses();
    } else if (command === 'add') {
      let amount = args[3];
      let memo = args[4];
      if (!amount || !memo) {
        console.log("You must provide an amount and memo.");
      } else {
        this.application.addExpense(amount, memo);
      }
    } else if (command === 'search') {
      let searchTerm = args[3];
      this.application.searchExpenses(searchTerm);
    } else {
      this.displayHelp();
    }
  }
}

let cli = new CLI();
cli.run(process.argv);